import React from 'react';
import dotnetify from 'dotnetify';
import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';
import { Table, TableBody, TableHeader, TableHeaderColumn, TableRow, TableRowColumn } from 'material-ui/Table';
import MenuItem from 'material-ui/MenuItem';
import RaisedButton from 'material-ui/RaisedButton';
import SelectField from 'material-ui/SelectField';
import TextField from 'material-ui/TextField';
import { grey400, pink400 } from 'material-ui/styles/colors';
import BasePage from '../components/BasePage';
import ThemeDefault from '../styles/theme-default';
import TimePicker from 'react-time-picker';
import Toggle from 'material-ui/Toggle';


function initFileUploader(target) {
					var previewNode = document.querySelector("#zdrop-template");
					previewNode.id = "";
					var previewTemplate = previewNode.parentNode.innerHTML;
					previewNode.parentNode.removeChild(previewNode);


					var zdrop = new Dropzone(target, {
						url: '/Home/UploadFile',
						maxFilesize:20,
						previewTemplate: previewTemplate,
						autoQueue: true,
						previewsContainer: "#previews",
						clickable: "#upload-label"
					});

					zdrop.on("addedfile", function(file) { 
						$('.preview-container').css('visibility', 'visible');
					});

					zdrop.on("totaluploadprogress", function (progress) {
						var progr = document.querySelector(".progress .determinate");
						if (progr === undefined || progr === null)
							return;

						progr.style.width = progress + "%";
					});

					zdrop.on('dragenter', function () {
						$('.fileuploader').addClass("active");
					});

					zdrop.on('dragleave', function () {
						$('.fileuploader').removeClass("active");			
					});

					zdrop.on('drop', function () {
						$('.fileuploader').removeClass("active");	
					});
					
					var toggle = true;
					/* Preview controller of hide / show */
					$('#controller').click(function() {
						if(toggle){
							$('#previews').css('visibility', 'hidden');
							$('#controller').html("keyboard_arrow_up");
							$('#previews').css('height', '0px');
							toggle = false;
						}else{
							$('#previews').css('visibility', 'visible');
							$('#controller').html("keyboard_arrow_down");
							$('#previews').css('height', 'initial');
							toggle = true;
						}
					});
				}

class FormPage extends React.Component {
  constructor(props) {
    super(props);
    this.vm = dotnetify.react.connect('Form', this);
    this.dispatch = state => this.vm.$dispatch(state);
    this.routeTo = route => this.vm.$routeTo(route);

    this.state = {
      dirty: false,
      Employees: [],
      FirstName: '',
      LastName: '',
      PaginaTelevideo: '',
      IndirizzoFTP: '',
      IndirizzoEmail: '',
      time1: '09:10',
      time2: '18:25',
      toggle1:            true,
      toggle2:            true,
      toggle3:            false,
      toggle4:            true
    };
  }
/*
$scope.$on('$destroy', function() {
    vm.stop();
    console.log('DashboardController scope destroyed.');
})
*/
  componentWillUnmount() {
    window.removeEventListener('beforeunload', this.handleLeavePage);
    // this.vm.$destroy();
  }

  componentDidMount() {
    console.log('Form - componentDidMount');
    window.addEventListener('beforeunload', this.handleLeavePage);
    
    
    
    initFileUploader("#zdrop");

				
    
    
    
  };

  handleLeavePage(e) {
    this.vm.$destroy();
  }
  
/*

componentDidMount() {
    window.addEventListener('beforeunload', this.handleLeavePage);
  }

  componentWillUnmount() {
    window.removeEventListener('beforeunload', this.handleLeavePage);
  }

  handleLeavePage(e) {
    const confirmationMessage = 'Some message';
    e.returnValue = confirmationMessage;     // Gecko, Trident, Chrome 34+
    return confirmationMessage;              // Gecko, WebKit, Chrome <34
  }

*/

  onChange = time1 => this.setState({ time1 })
  
  handleCancel = _ => {
    this.dispatch({ Cancel: Id });
    this.setState({ dirty: false });
  };

  handleSave = _ => {
    this.dispatch({ Save: {
      Id: Id,
      FirstName: FirstName,
      LastName: LastName,
      PaginaTelevideo: PaginaTelevideo,
      IndirizzoFTP: IndirizzoFTP,
      IndirizzoEmail: IndirizzoEmail
    } });
    this.setState({ dirty: false });
  };

  handleDownload = _ => {}
  handleUpload = _ => {}
  handleAddTime = _ => {}

  render() {
    let { dirty, Employees, Id, FirstName, LastName, PaginaTelevideo, IndirizzoFTP, IndirizzoEmail } = this.state;

    const styles = {
      selectLabel: { color: pink400 },
      toggleDiv: {
        maxWidth: 300,
        marginTop: 40,
        marginBottom: 5
      },
      toggleLabel: {
        color: grey400,
        fontWeight: 100
      },
      buttons: {
        marginTop: 30,
        float: 'right'
      },
      saveButton: { marginLeft: 5 }
    };

    // Usata nella configurazione originale per gestire la selezione delle voci nella select in alto
    // const handleSelectFieldChange = (event, idx, value) => this.routeTo(Employees.find(i => i.Id == value).Route);

    const handleCancel_1 = _ => {
      this.dispatch({ Cancel: Id });
      this.setState({ dirty: false });
    };

    const handleSave_1 = _ => {
      this.dispatch({ Save: {
        Id: Id,
        FirstName: FirstName,
        LastName: LastName,
        PaginaTelevideo: PaginaTelevideo,
        IndirizzoFTP: IndirizzoFTP,
        IndirizzoEmail: IndirizzoEmail
      } });
      this.setState({ dirty: false });
    };

    return (
      <MuiThemeProvider muiTheme={ThemeDefault}>
        <BasePage title="Impostazioni" navigation="Applicazione / Settings">
          <form>
            { /*
            <SelectField value={Id} onChange={handleSelectFieldChange} floatingLabelText="Select to edit" floatingLabelStyle={styles.selectLabel}>
              {Employees.map(item => <MenuItem key={item.Id} value={item.Id} primaryText={item.Name} />)}
            </SelectField>
            */ }
            <div>
              <TextField
                hintText="FirstName"
                floatingLabelText="FirstName"
                fullWidth={true}
                value={this.state.FirstName || ''}
                onChange={event => this.setState({ FirstName: event.target.value, dirty: true })}
              />
              <TextField
                hintText="LastName"
                floatingLabelText="LastName"
                fullWidth={true}
                value={this.state.LastName || ''}
                onChange={event => this.setState({ LastName: event.target.value, dirty: true })}
              />
              <TextField
                hintText="Inserire un indirizzo HTTPS"
                floatingLabelText="Indirizzo pagina televideo"
                fullWidth={true}
                value={this.state.PaginaTelevideo || ''}
                onChange={event => this.setState({ PaginaTelevideo: event.target.value, dirty: true })}
              />
              <TextField
                hintText="Inserire un indirizzo FTP"
                floatingLabelText="Indirizzo FTP di pubblicazione"
                fullWidth={true}
                value={this.state.IndirizzoFTP || ''}
                onChange={event => this.setState({ IndirizzoFTP: event.target.value, dirty: true })}
              />

              <TextField
                hintText="Inserire un indirizzo email"
                floatingLabelText="Email di amministrazione"
                fullWidth={true}
                value={this.state.IndirizzoEmail || ''}
                onChange={event => this.setState({ IndirizzoEmail: event.target.value, dirty: true })}
              />
            </div>

            { /*
            <div style="font-size: 16px; line-height: 24px; width: 100%; height: 72px; display: inline-block; position: relative; background-color: transparent; font-family: Roboto, sans-serif; transition: height 200ms cubic-bezier(0.23, 1, 0.32, 1) 0ms; cursor: auto;"><label for="undefined-FirstName-FirstName-32894" style="position: absolute; line-height: 22px; top: 38px; transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms; z-index: 1; transform: scale(0.75) translate(0px, -28px); transform-origin: left top; pointer-events: none; user-select: none; color: rgba(0, 0, 0, 0.3);">FirstName</label><div style="position: absolute; opacity: 0; color: rgba(0, 0, 0, 0.3); transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms; bottom: 12px;">FirstName</div><input type="text" id="undefined-FirstName-FirstName-32894" value="Clive" style="padding: 0px; position: relative; width: 100%; border: none; outline: none; background-color: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0.87); cursor: inherit; font: inherit; opacity: 1; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); height: 100%; box-sizing: border-box; margin-top: 14px;"><div><hr aria-hidden="true" style="border-top: none rgb(224, 224, 224); border-left: none rgb(224, 224, 224); border-right: none rgb(224, 224, 224); border-bottom: 1px solid rgb(224, 224, 224); bottom: 8px; box-sizing: content-box; margin: 0px; position: absolute; width: 100%;"><hr aria-hidden="true" style="border-top: none rgb(0, 188, 212); border-left: none rgb(0, 188, 212); border-right: none rgb(0, 188, 212); border-bottom: 2px solid rgb(0, 188, 212); bottom: 8px; box-sizing: content-box; margin: 0px; position: absolute; width: 100%; transform: scaleX(0); transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;"></div></div>
            */ }

            <div style={{fontSize: "16px", lineHeight: "24px", width: "100%", height: "300px", display: "inline-block", position: "relative", backgroundColor: "transparent"}}>
              <div style={{height: '200px', width: '200px', float: 'left'}}>
              Prima estrazione
              <TimePicker
                      onChange={this.onChange}
                      isOpen={true}
                      value={this.state.time1}
                    />
              </div>
            
              <div style={{height: '200px', width: '200px', float: 'left'}}>
              Seconda estrazione
                    <TimePicker
                      onChange={this.onChange}
                      isOpen={true}
                      value={this.state.time2}
                    />
              </div>
              <RaisedButton label="Aggiungi" onClick={this.handleAddTime} primary={false} />
            </div>
            { /*
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHeaderColumn>Prima estrazione</TableHeaderColumn>
                  <TableHeaderColumn>Seconda estrazione</TableHeaderColumn>
                </TableRow>
              </TableHeader>
              <TableBody>
                <TableRow key="1">
                  <TableRowColumn>
                    <TimePicker
                      onChange={this.onChange}
                      isOpen={true}
                      value={this.state.time1}
                    />
                  </TableRowColumn>
                  <TableRowColumn>
                    <TimePicker
                      onChange={this.onChange}
                      isOpen={true}
                      value={this.state.time2}
                    />
                  </TableRowColumn>
                </TableRow>
              </TableBody>
            </Table>
            Toggle: disabled={true} false
            */}
            <div style={styles.buttons}>
              <RaisedButton label="Cancel" onClick={this.handleCancel} disabled={!dirty} />
              <RaisedButton label="Save" onClick={this.handleSave} disabled={!dirty} style={styles.saveButton} primary={true} />
            </div>
            <div className="row">
              <div className="col-xs-12 col-sm-12 col-md-12 col-lg-12 m-b-15 ">
                <h3>Monitor</h3>
                <Toggle
                    label="Webserver"
                    toggled={this.state.toggle1}
                    onToggle={() => this.setState({toggle1: !this.state.toggle1})}
                  />
                  <Toggle
                    label="ATLAS Player"
                    toggled={this.state.toggle1}
                    onToggle={() => this.setState({toggle1: !this.state.toggle2})}
                  />
                  <Toggle
                    label="FTP"
                    toggled={this.state.toggle1}
                    onToggle={() => this.setState({toggle1: !this.state.toggle3})}
                  />
                  <Toggle
                    label="MySQL"
                    toggled={this.state.toggle2}
                    onToggle={() => this.setState({toggle2: !this.state.toggle4})}
                  />
              </div>
            </div>
<div dangerouslySetInnerHTML={{__html: `
<script src="https://cdnjs.cloudflare.com/ajax/libs/dropzone/4.0.1/dropzone.js" />
<style>
.fileuploader{
  position: relative;
  background: white;
  width: 100%;
  height: 400px;
  border: 1px solid #e9e9e9;
  box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);
  -moz-box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);
  -webkit-box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);
}
.fileuploader #upload-label{
  background: #2196F3;
  color: #fff;
  box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);
  -moz-box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);
  -webkit-box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);
  padding: 16px;
  position: absolute;
  top: 45%;
  left: 0;
  right: 0;
  margin-right: auto;
  margin-left: auto;
  min-width: 20%;
  text-align: center;
  padding-top: 40px;
  transition: 0.8s all;
  -webkit-transition: 0.8s all;
  -moz-transition: 0.8s all;
  cursor: pointer;
}
.fileuploader.active{
  background: #2196F3;
}
.fileuploader.active #upload-label{
  background: #fff;
  color: #2196F3;
}
.fileuploader #upload-label span.title{
  font-size: 1.1em;
  font-weight: bold;
  display: block;
}
.fileuploader #upload-label i{
  text-align: center;
  display: block;
  background: white;
  color: #2196F3;
  box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);
  -moz-box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);
  -webkit-box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);
  border-radius: 100%;
  width: 80px;
  height: 80px;
  font-size: 60px;
  padding-top: 10px;
  position: absolute;
  top: -50px;
  left: 0;
  right: 0;
  margin-right: auto;
  margin-left: auto;
}
/** Preview of collections of uploaded documents **/
.preview-container{
  position: fixed;
  right: 10px;
  bottom: 0px;
  width: 300px;
  box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);
  -moz-box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);
  -webkit-box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);
  visibility: hidden;
}
.preview-container #previews{
  max-height: 400px;
  overflow: auto; 
}
.preview-container #previews .zdrop-info{
  width: 88%;
  margin-right: 2%;
}
.preview-container #previews.collection{
  margin: 0;
}
.preview-container #previews.collection .actions a{
  width: 1.5em;
  height: 1.5em;
  line-height: 1;
}
.preview-container #previews.collection .actions a i{
  font-size: 1em;
  line-height: 1.6;
}
.preview-container #previews.collection .dz-error-message{
  font-size: 0.8em;
  margin-top: -12px;
  color: #F44336;
}
.preview-container .header{
  background: #2196F3;
  color: #fff;
  padding: 8px;
}
.preview-container .header i{
  float: right;
  cursor: pointer;
}

</style>

<div class="row">
		<div class="col s12">
			<!-- Uploader Dropzone -->
			<div id="zdrop" class="fileuploader ">
				<div id="upload-label" style="width: 200px;">
					<i class="material-icons">cloud_upload</i>
					<span class="title">Drag your Files here</span>
					<span>Some description here <span/>
				</div>
			</div>
			<!-- Preview collection of uploaded documents -->
			<div class="preview-container">
				<div class="header">
					<span>Uploaded Files</span>	
					<i id="controller" class="material-icons">keyboard_arrow_down</i>
				</div>
				<div class="collection card" id="previews">
					<div class="collection-item clearhack valign-wrapper item-template" id="zdrop-template">
						<div class="left pv zdrop-info" data-dz-thumbnail>
							<div>
								<span data-dz-name></span> <span data-dz-size></span>
							</div>
							<div class="progress">
								<div class="determinate" style="width:0" data-dz-uploadprogress></div>
							</div>
							<div class="dz-error-message"><span data-dz-errormessage></span></div>
						</div>

						<div class="secondary-content actions">
							<a href="#!" data-dz-remove class="btn-floating ph red white-text waves-effect waves-light"><i class="material-icons white-text">clear</i></i></a>
						</div>
					</div>
				</div>
			</div>
		</div> `,}}/>
            <div className="row">
              <div className="col-xs-12 col-sm-12 col-md-12 col-lg-12 m-b-15 ">
                <h3>Gestione regole</h3>
                  <RaisedButton label="Download" onClick={this.handleDownload} disabled={false} style={styles.saveButton} primary={true} />
                  <RaisedButton label="Upload" onClick={this.handleUpload} disabled={false} style={styles.saveButton} primary={true} />
<input onChange={this.onFileChange} type="file"></input>
  <button onClick={this.uploadFile}>Upload</button>
              </div>

            </div>
          </form>
        </BasePage>
      </MuiThemeProvider>
    );
  }
}

export default FormPage;
